// Motor Pins
const int ENA = 10;   // Motor speed control (PWM)
const int IN1 = 9;    // Motor direction control
const int IN2 = 8;    // Motor direction control
const int lightPin = 7;  // Light control (digital on/off)

// Track light state
bool lightOn = false;  // Variable to track whether the light is on or off
String commandBuffer = "";  // Buffer to store incoming commands

unsigned long lastCharTime = 0;  // Timestamp to track the last received character
const unsigned long charTimeout = 50;  // Timeout in ms to consider the command complete

void setup() {
  Serial.begin(9600);  // Initialize serial communication at 9600 baud
  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(lightPin, OUTPUT);
  digitalWrite(lightPin, LOW);  // Start with the light off
}

void loop() {
  // Read incoming characters from the serial port
  while (Serial.available() > 0) {
    char incomingChar = Serial.read();  // Read incoming character
    commandBuffer += incomingChar;  // Append the character to the buffer
    lastCharTime = millis();  // Update the last character received timestamp
  }

  // Process the command if we've stopped receiving characters for some time (timeout)
  if (millis() - lastCharTime > charTimeout && commandBuffer.length() > 0) {
    processCommand(commandBuffer);  // Process the complete command
    commandBuffer = "";  // Clear the buffer for the next command
  }
}

// Function to process commands
void processCommand(String command) {
  command.trim();

  // Split the command into parts separated by spaces
  int spaceIndex = 0;
  while ((spaceIndex = command.indexOf(' ')) != -1) {
    String part = command.substring(0, spaceIndex);
    handleCommandPart(part);  // Handle each part individually
    command = command.substring(spaceIndex + 1);
    command.trim();  // Remove leading spaces
  }
  
  // Handle the last remaining part if any
  if (command.length() > 0) {
    handleCommandPart(command);
  }
}

// Helper function to handle each part of the command
void handleCommandPart(String part) {
  if (part == "LIGHT_ON") {
    if (!lightOn) {
      digitalWrite(lightPin, HIGH);  // Turn the light on
      lightOn = true;
      Serial.println("Light turned ON.");
    }
  } else if (part == "LIGHT_OFF") {
    if (lightOn) {
      digitalWrite(lightPin, LOW);  // Turn the light off
      lightOn = false;
      Serial.println("Light turned OFF.");
    }
  } else {
    int pwmValue = part.toInt();

    // Check if the part is a valid PWM value
    if (part == String(pwmValue) && pwmValue != 0) {
      if (pwmValue > 0) {
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);
        analogWrite(ENA, pwmValue);
        Serial.print("Motor running forward at PWM value: ");
        Serial.println(pwmValue); 
      } else if (pwmValue < 0) {
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
        analogWrite(ENA, -pwmValue);
        Serial.print("Motor running in reverse at PWM value: ");
        Serial.println(-pwmValue);
      }
    } else if (pwmValue == 0) {
      digitalWrite(IN1, LOW);
      digitalWrite(IN2, LOW);
      analogWrite(ENA, 0);
      Serial.println("Motor stopped.");
    } else {
      Serial.print("Invalid Command Part: ");
      Serial.println(part);
    }
  }
}
